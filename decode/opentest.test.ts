import { assert, assertEquals } from '@std/assert';
import { PLDict } from '../dict.ts';
import { FORMAT_STRINGS } from '../format.ts';
import { decodeOpenStep } from './openstep.ts';

Deno.test('Empty', () => {
	const te = new TextEncoder();
	const LS = String.fromCharCode(0x2028);
	const PS = String.fromCharCode(0x2029);
	const empties = [
		'',
		' ',
		'\r',
		'\n',
		'\r\n',
		'\n\r',
		'\t',
		'\x0B',
		'\f',
		'// comment',
		'/* comment */',
		...[
			'\r',
			'\n',
			'\r\n',
			'\n\r',
			LS,
			PS,
			'*',
			'//',
		].map((s) => `/* ${s} */`),
		LS,
		PS,
	];

	for (const a of empties) {
		for (const b of empties) {
			if (a.startsWith('//') && b.startsWith('/*')) {
				continue;
			}
			const str = `${a}${b}`;
			const tag = JSON.stringify(str);
			const dec = decodeOpenStep(te.encode(str));
			assertEquals(dec.format, FORMAT_STRINGS, tag);
			assert(PLDict.is(dec.plist), tag);
			assertEquals(dec.plist.size, 0, tag);
		}
	}
});
